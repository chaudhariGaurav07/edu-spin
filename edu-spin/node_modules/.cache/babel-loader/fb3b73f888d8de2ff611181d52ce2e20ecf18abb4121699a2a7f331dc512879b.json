{"ast":null,"code":"var _jsxFileName = \"/home/gaurav/EduSpin-TLW/edu-spin/src/pages/VideoLearning.js\";\nimport React from \"react\";\nimport \"./../styles/VideoLearning.css\";\n\n// Video data with YouTube links\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videos = [{\n  id: 1,\n  title: \"Learn ABCs with Fun!\",\n  link: \"https://www.youtube.com/watch?v=ccEpTTZW34g\"\n}, {\n  id: 2,\n  title: \"Basic Math for Kids\",\n  link: \"https://youtu.be/mjlsSYLLOSE?si=8AyFB_R4BrEd0ZzR\"\n}, {\n  id: 3,\n  title: \"Fun Science Experiments\",\n  link: \"https://youtu.be/1Q_4HXewiS0?si=LZnt_CRBbv1AG7vZ\"\n}, {\n  id: 4,\n  title: \"Story Time: The Lion & The Mouse\",\n  link: \"https://youtu.be/GxcGVCEEdcU?si=NmItGe_fniqa_35D\"\n}];\n\n// Function to convert YouTube URL to embed format\nconst getEmbedUrl = url => {\n  let videoId = \"\";\n  if (url.includes(\"youtube.com/watch?v=\")) {\n    var _url$split$;\n    videoId = (_url$split$ = url.split(\"v=\")[1]) === null || _url$split$ === void 0 ? void 0 : _url$split$.split(\"&\")[0]; // Extract ID from watch URL\n  } else if (url.includes(\"youtu.be/\")) {\n    var _url$split$2;\n    videoId = (_url$split$2 = url.split(\"youtu.be/\")[1]) === null || _url$split$2 === void 0 ? void 0 : _url$split$2.split(\"?\")[0]; // Extract ID from shortened URL\n  }\n  return videoId ? `https://www.youtube.com/embed/${videoId}` : \"\";\n};\nconst VideoLearning = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-learning-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDCFA Video Learning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-list\",\n      children: videos.map(video => {\n        const embedUrl = getEmbedUrl(video.link); // Get embed URL\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-card\",\n          children: [embedUrl ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n            width: \"100%\",\n            height: \"200\",\n            src: embedUrl,\n            title: video.title,\n            frameBorder: \"0\",\n            allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error loading video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this) // Fallback if URL is incorrect\n          , /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: video.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, video.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = VideoLearning;\nexport default VideoLearning;\nvar _c;\n$RefreshReg$(_c, \"VideoLearning\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","videos","id","title","link","getEmbedUrl","url","videoId","includes","_url$split$","split","_url$split$2","VideoLearning","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","video","embedUrl","width","height","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["/home/gaurav/EduSpin-TLW/edu-spin/src/pages/VideoLearning.js"],"sourcesContent":["import React from \"react\";\nimport \"./../styles/VideoLearning.css\";\n\n// Video data with YouTube links\nconst videos = [\n  { id: 1, title: \"Learn ABCs with Fun!\", link: \"https://www.youtube.com/watch?v=ccEpTTZW34g\" },\n  { id: 2, title: \"Basic Math for Kids\", link: \"https://youtu.be/mjlsSYLLOSE?si=8AyFB_R4BrEd0ZzR\" },\n  { id: 3, title: \"Fun Science Experiments\", link: \"https://youtu.be/1Q_4HXewiS0?si=LZnt_CRBbv1AG7vZ\" },\n  { id: 4, title: \"Story Time: The Lion & The Mouse\", link: \"https://youtu.be/GxcGVCEEdcU?si=NmItGe_fniqa_35D\" }\n];\n\n// Function to convert YouTube URL to embed format\nconst getEmbedUrl = (url) => {\n  let videoId = \"\";\n  \n  if (url.includes(\"youtube.com/watch?v=\")) {\n    videoId = url.split(\"v=\")[1]?.split(\"&\")[0]; // Extract ID from watch URL\n  } else if (url.includes(\"youtu.be/\")) {\n    videoId = url.split(\"youtu.be/\")[1]?.split(\"?\")[0]; // Extract ID from shortened URL\n  }\n\n  return videoId ? `https://www.youtube.com/embed/${videoId}` : \"\";\n};\n\nconst VideoLearning = () => {\n  return (\n    <div className=\"video-learning-container\">\n      <h1>ðŸ“º Video Learning</h1>\n      <div className=\"video-list\">\n        {videos.map((video) => {\n          const embedUrl = getEmbedUrl(video.link); // Get embed URL\n          \n          return (\n            <div key={video.id} className=\"video-card\">\n              {embedUrl ? (\n                <iframe\n                  width=\"100%\"\n                  height=\"200\"\n                  src={embedUrl}\n                  title={video.title}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              ) : (\n                <p>Error loading video</p> // Fallback if URL is incorrect\n              )}\n              <h3>{video.title}</h3>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoLearning;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}