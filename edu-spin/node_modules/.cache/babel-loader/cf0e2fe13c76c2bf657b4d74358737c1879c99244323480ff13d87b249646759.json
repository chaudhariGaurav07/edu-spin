{"ast":null,"code":"var _jsxFileName = \"/home/gaurav/EduSpin-TLW/edu-spin/src/pages/PuzzleMatch.js\",\n  _s = $RefreshSig$();\n// src/pages/PuzzleMatch.js\nimport React, { useState } from \"react\";\nimport \"./../styles/PuzzleMatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = [{\n  id: 1,\n  src: \"/images/apple.png\",\n  name: \"Apple\",\n  type: \"image\"\n}, {\n  id: 2,\n  name: \"Apple\",\n  type: \"text\"\n},\n// Matching text card, changed id to 2\n{\n  id: 3,\n  src: \"/images/banana.png\",\n  name: \"Banana\",\n  type: \"image\"\n}, {\n  id: 4,\n  name: \"Banana\",\n  type: \"text\"\n},\n// Changed id to 4\n{\n  id: 5,\n  src: \"/images/car.png\",\n  name: \"Car\",\n  type: \"image\"\n}, {\n  id: 6,\n  name: \"Car\",\n  type: \"text\"\n},\n// Changed id to 6\n{\n  id: 7,\n  src: \"/images/dog.png\",\n  name: \"Dog\",\n  type: \"image\"\n}, {\n  id: 8,\n  name: \"Dog\",\n  type: \"text\"\n} // Changed id to 8\n];\nconst PuzzleMatch = () => {\n  _s();\n  const [shuffledImages] = useState([...images].sort(() => Math.random() - 0.5));\n  const [selectedPair, setSelectedPair] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const handleSelection = item => {\n    // Prevent selecting the same card twice\n    if (selectedPair.some(selected => selected.id === item.id)) return;\n    const newSelection = [...selectedPair, item];\n    if (newSelection.length === 2) {\n      // Check if they match (same id but different type)\n      if (newSelection[0].id === newSelection[1].id && newSelection[0].type !== newSelection[1].type) {\n        setMatchedPairs(prev => [...prev, newSelection[0].id]);\n      }\n      setTimeout(() => setSelectedPair([]), 800);\n    } else {\n      setSelectedPair(newSelection);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Match the Pairs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Find the matching image and name!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: shuffledImages.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `puzzle-item ${selectedPair.some(selected => selected.id === item.id) || matchedPairs.includes(item.id) ? \"flipped\" : \"\"}`,\n        onClick: () => handleSelection(item),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"puzzle-front\",\n          children: selectedPair.some(selected => selected.id === item.id) || matchedPairs.includes(item.id) ? item.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.src,\n            alt: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 82\n          }, this) : \"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(PuzzleMatch, \"Q/QA6bmFpD3izotPcoHf5NG1KYw=\");\n_c = PuzzleMatch;\nexport default PuzzleMatch;\nvar _c;\n$RefreshReg$(_c, \"PuzzleMatch\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","images","id","src","name","type","PuzzleMatch","_s","shuffledImages","sort","Math","random","selectedPair","setSelectedPair","matchedPairs","setMatchedPairs","handleSelection","item","some","selected","newSelection","length","prev","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","includes","onClick","alt","_c","$RefreshReg$"],"sources":["/home/gaurav/EduSpin-TLW/edu-spin/src/pages/PuzzleMatch.js"],"sourcesContent":["// src/pages/PuzzleMatch.js\nimport React, { useState } from \"react\";\nimport \"./../styles/PuzzleMatch.css\";\n\nconst images = [\n  { id: 1, src: \"/images/apple.png\", name: \"Apple\", type: \"image\" },\n  { id: 2, name: \"Apple\", type: \"text\" }, // Matching text card, changed id to 2\n  { id: 3, src: \"/images/banana.png\", name: \"Banana\", type: \"image\" },\n  { id: 4, name: \"Banana\", type: \"text\" }, // Changed id to 4\n  { id: 5, src: \"/images/car.png\", name: \"Car\", type: \"image\" },\n  { id: 6, name: \"Car\", type: \"text\" }, // Changed id to 6\n  { id: 7, src: \"/images/dog.png\", name: \"Dog\", type: \"image\" },\n  { id: 8, name: \"Dog\", type: \"text\" }, // Changed id to 8\n];\n\nconst PuzzleMatch = () => {\n  const [shuffledImages] = useState([...images].sort(() => Math.random() - 0.5));\n  const [selectedPair, setSelectedPair] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  const handleSelection = (item) => {\n    // Prevent selecting the same card twice\n    if (selectedPair.some((selected) => selected.id === item.id)) return;\n\n    const newSelection = [...selectedPair, item];\n\n    if (newSelection.length === 2) {\n      // Check if they match (same id but different type)\n      if (newSelection[0].id === newSelection[1].id && newSelection[0].type !== newSelection[1].type) {\n        setMatchedPairs((prev) => [...prev, newSelection[0].id]);\n      }\n      setTimeout(() => setSelectedPair([]), 800);\n    } else {\n      setSelectedPair(newSelection);\n    }\n  };\n\n  return (\n    <div className=\"puzzle-container\">\n      <h1>Match the Pairs</h1>\n      <p>Find the matching image and name!</p>\n      <div className=\"puzzle-grid\">\n        {shuffledImages.map((item, index) => (\n          <div\n            key={index}\n            className={`puzzle-item ${\n              selectedPair.some((selected) => selected.id === item.id) || matchedPairs.includes(item.id) ? \"flipped\" : \"\"\n            }`}\n            onClick={() => handleSelection(item)}\n          >\n            <div className=\"puzzle-front\">\n              {selectedPair.some((selected) => selected.id === item.id) || matchedPairs.includes(item.id) ? (\n                item.type === \"image\" ? <img src={item.src} alt={item.name} /> : <span>{item.name}</span>\n              ) : (\n                \"?\"\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PuzzleMatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}