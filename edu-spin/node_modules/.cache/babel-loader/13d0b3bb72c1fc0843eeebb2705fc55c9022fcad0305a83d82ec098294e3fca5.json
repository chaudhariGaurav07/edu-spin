{"ast":null,"code":"var _jsxFileName = \"/home/gaurav/EduSpin-TLW/edu-spin/src/pages/PuzzleMatch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../styles/PuzzleMatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = [{\n  id: 1,\n  src: \"/images/apple.png\",\n  name: \"Apple\",\n  type: \"image\"\n}, {\n  id: 2,\n  name: \"Apple\",\n  type: \"text\"\n}, {\n  id: 3,\n  src: \"/images/banana.png\",\n  name: \"Banana\",\n  type: \"image\"\n}, {\n  id: 4,\n  name: \"Banana\",\n  type: \"text\"\n}, {\n  id: 5,\n  src: \"/images/car.png\",\n  name: \"Car\",\n  type: \"image\"\n}, {\n  id: 6,\n  name: \"Car\",\n  type: \"text\"\n}, {\n  id: 7,\n  src: \"/images/dog.png\",\n  name: \"Dog\",\n  type: \"image\"\n}, {\n  id: 8,\n  name: \"Dog\",\n  type: \"text\"\n}];\nconst PuzzleMatch = () => {\n  _s();\n  const [shuffledItems, setShuffledItems] = useState([]);\n  const [selectedPair, setSelectedPair] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState(new Set());\n  const [isChecking, setIsChecking] = useState(false);\n\n  // Shuffle images when the component mounts\n  useEffect(() => {\n    setShuffledItems([...images].sort(() => Math.random() - 0.5));\n  }, []);\n  const handleSelection = item => {\n    if (isChecking || selectedPair.some(selected => selected.id === item.id) || matchedPairs.has(item.name)) {\n      return;\n    }\n    const newSelection = [...selectedPair, item];\n    if (newSelection.length === 2) {\n      setIsChecking(true);\n      setTimeout(() => {\n        if (newSelection[0].name === newSelection[1].name && newSelection[0].type !== newSelection[1].type) {\n          setMatchedPairs(prev => new Set(prev).add(newSelection[0].name));\n        }\n        setSelectedPair([]);\n        setIsChecking(false);\n      }, 1000);\n    } else {\n      setSelectedPair(newSelection);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Match the Pairs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Find the matching image and name!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: shuffledItems.map(item => {\n        const isFlipped = selectedPair.some(selected => selected.id === item.id) || matchedPairs.has(item.name);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `puzzle-item ${isFlipped ? \"flipped\" : \"\"} ${matchedPairs.has(item.name) ? \"matched\" : \"\"}`,\n          onClick: () => handleSelection(item),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"puzzle-inner\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"puzzle-front\",\n              children: isFlipped ? item.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: item.src,\n                alt: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 85\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 126\n              }, this) : \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(PuzzleMatch, \"/KBvZhTDbC0tQejXvL0jaXPHpLE=\");\n_c = PuzzleMatch;\nexport default PuzzleMatch;\nvar _c;\n$RefreshReg$(_c, \"PuzzleMatch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","images","id","src","name","type","PuzzleMatch","_s","shuffledItems","setShuffledItems","selectedPair","setSelectedPair","matchedPairs","setMatchedPairs","Set","isChecking","setIsChecking","sort","Math","random","handleSelection","item","some","selected","has","newSelection","length","setTimeout","prev","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isFlipped","onClick","alt","_c","$RefreshReg$"],"sources":["/home/gaurav/EduSpin-TLW/edu-spin/src/pages/PuzzleMatch.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../styles/PuzzleMatch.css\";\n\nconst images = [\n  { id: 1, src: \"/images/apple.png\", name: \"Apple\", type: \"image\" },\n  { id: 2, name: \"Apple\", type: \"text\" },\n  { id: 3, src: \"/images/banana.png\", name: \"Banana\", type: \"image\" },\n  { id: 4, name: \"Banana\", type: \"text\" },\n  { id: 5, src: \"/images/car.png\", name: \"Car\", type: \"image\" },\n  { id: 6, name: \"Car\", type: \"text\" },\n  { id: 7, src: \"/images/dog.png\", name: \"Dog\", type: \"image\" },\n  { id: 8, name: \"Dog\", type: \"text\" },\n];\n\nconst PuzzleMatch = () => {\n  const [shuffledItems, setShuffledItems] = useState([]);\n  const [selectedPair, setSelectedPair] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState(new Set());\n  const [isChecking, setIsChecking] = useState(false);\n\n  // Shuffle images when the component mounts\n  useEffect(() => {\n    setShuffledItems([...images].sort(() => Math.random() - 0.5));\n  }, []);\n\n  const handleSelection = (item) => {\n    if (isChecking || selectedPair.some((selected) => selected.id === item.id) || matchedPairs.has(item.name)) {\n      return;\n    }\n\n    const newSelection = [...selectedPair, item];\n\n    if (newSelection.length === 2) {\n      setIsChecking(true);\n\n      setTimeout(() => {\n        if (newSelection[0].name === newSelection[1].name && newSelection[0].type !== newSelection[1].type) {\n          setMatchedPairs((prev) => new Set(prev).add(newSelection[0].name));\n        }\n        setSelectedPair([]);\n        setIsChecking(false);\n      }, 1000);\n    } else {\n      setSelectedPair(newSelection);\n    }\n  };\n\n  return (\n    <div className=\"puzzle-container\">\n      <h1>Match the Pairs</h1>\n      <p>Find the matching image and name!</p>\n      <div className=\"puzzle-grid\">\n        {shuffledItems.map((item) => {\n          const isFlipped = selectedPair.some((selected) => selected.id === item.id) || matchedPairs.has(item.name);\n\n          return (\n            <div\n              key={item.id}\n              className={`puzzle-item ${isFlipped ? \"flipped\" : \"\"} ${matchedPairs.has(item.name) ? \"matched\" : \"\"}`}\n              onClick={() => handleSelection(item)}\n            >\n              <div className=\"puzzle-inner\">\n                <div className=\"puzzle-front\">{isFlipped ? (item.type === \"image\" ? <img src={item.src} alt={item.name} /> : <span>{item.name}</span>) : \"?\"}</div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PuzzleMatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}